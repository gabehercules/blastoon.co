generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER Model
model User {
  addressId       String          @id @unique @default(uuid()) @map("address_id")
  id              String?         @unique
  address         String          @unique
  signature       String?         @unique
  slug            String?         @unique
  username        String?         @unique
  createdAt       DateTime        @default(now()) @map("created_at")
  holdingNFTs     Int             @default(0) @map("holding_NFTs")
  upgradedNFTs    Int             @default(0) @map("upgraded_NFTs")
  firstVerified   Boolean         @default(false) @map("first_verified")
  verifiedUpgrade Boolean         @default(false) @map("verified_upgrade")
  nfts            BlastToonNfts[]
  cheeseCoin      Cheese?
  userCheeseLogs  CheeseLogs[]
  superCheese     SuperCheese?
  cardPacks       UserCardPacks[]

  Player          Player?
  UserInventory   PlayerInventory[]
  MarketplaceCart MarketplaceCart[]
}

// Cheese Model - Regular $Cheese Coin
model Cheese {
  id        String @id @unique @default(uuid())
  addressId String @unique @map("address_id")
  amount    Int    @default(0)
  user      User   @relation(fields: [addressId], references: [addressId], onDelete: Cascade)

  @@map("Cheese")
}

// SuperCheese Model - Super $Cheese Coin
model SuperCheese {
  id        String @id @unique @default(uuid())
  addressId String @unique @map("address_id")
  amount    Int    @default(0)
  user      User   @relation(fields: [addressId], references: [addressId], onDelete: Cascade)

  @@map("Super_Cheese")
}

// Card Packs Model - this add flexibility to the packs as we can add more types of packs in the future
// and also add more fields to the packs attributes and specifications or easylly change the price of the packs
// or its attributes
model CardPacks {
  packId           String          @id @default(uuid()) @map("pack_id")
  slug             String          @default("")
  cheesePrice      Int             @default(0) @map("cheese_price")
  superCheesePrice Int             @default(0) @map("super_cheese_price")
  ethPrice         Float           @default(0) @map("eth_price")
  packType         PackType        @map("pack_type")
  description      String          @default("")
  UserCardPacks    UserCardPacks[]

  @@map("Card_Packs")
}

model UserCardPacks {
  id        String    @id @unique @default(uuid())
  addressId String    @map("address_id")
  packId    String    @map("pack_id")
  user      User      @relation(fields: [addressId], references: [addressId])
  pack      CardPacks @relation(fields: [packId], references: [packId])

  @@map("User_Card_Packs")
}

// ======== BEGIN: MARKETPLACE TABLES ======== //
model MarketItems {
  id               String            @id @unique @default(uuid())
  name             String
  slug             String            @unique
  description      String
  image            String
  isAsset          Boolean           @default(true) @map("is_asset")
  categoryId       String            @map("category_id")
  createdAt        DateTime          @default(now()) @map("created_at")
  publishedAt      DateTime?         @map("published_at")
  cheesePrice      Int?              @map("cheese_price")
  superCheesePrice Int?              @map("supercheese_price")
  ethPrice         Float?            @map("eth_price")
  status           DraftAndPublished @default(DRAFT)

  itemPrice              ItemPrice[]
  category               Categories           @relation(fields: [categoryId], references: [id])
  UserInventory          PlayerInventory[]
  MarketplaceCart        MarketplaceCart[]
  PlayerItemTransactions PlayerTransactions[]

  @@map("Market_Items")
}

model Categories {
  id          String   @id @unique @default(uuid())
  name        String
  slug        String   @unique
  description String
  createdAt   DateTime @default(now()) @map("created_at")

  marketItems MarketItems[]
}

model MarketplaceCart {
  id       String      @id @unique @default(uuid())
  userId   String      @map("user_id")
  itemId   String      @map("item_id")
  quantity Int         @default(1)
  user     User        @relation(fields: [userId], references: [addressId])
  item     MarketItems @relation(fields: [itemId], references: [id])

  @@map("Marketplace_Cart")
}

model ItemPrice {
  id           String       @id @unique @default(uuid())
  itemId       String       @map("item_id")
  currencyType CurrencyType
  price        Float
  item         MarketItems  @relation(fields: [itemId], references: [id])

  @@map("Item_Price")
}

// ======== END: MARKETPLACE TABLES ======== //

model CheeseLogs {
  id           String         @id @unique @default(uuid())
  addressId    String         @map("address_id")
  cheeseAmount Int            @map("cheese_amount")
  cheeseType   CheeseType     @map("cheese_type")
  timestamp    DateTime       @default(now())
  user         User           @relation(fields: [addressId], references: [addressId])
  event        CheeseLogEvent

  @@map("Cheese_Logs")
}

model BlastToonNfts {
  tokenId        Int     @id @map("token_id")
  imageUri       String? @map("image_uri")
  addressId      String? @map("address_id")
  ownerSince     BigInt? @map("owner_since")
  upgraded       Boolean @default(false)
  lastUpgradedBy String? @map("last_upgraded_by")
  owner          User?   @relation(fields: [addressId], references: [addressId])

  @@map("Blast_Toon_NFTs")
}

// ======== GAMEFICATION TABLES ======== //

model Player {
  id          String  @id @unique @default(uuid())
  addressId   String  @unique @map("address_id")
  username    String? @unique
  level       Int     @default(1)
  xp          Int     @default(0)
  cheese      Int     @default(0) @map("cheese")
  superCheese Int     @default(0) @map("super_cheese")
  badge       Badge?
  user        User    @relation(fields: [addressId], references: [addressId])

  PlayerAchievements PlayerAchievements[]
  PlayerTransactions PlayerTransactions[]

  @@map("Player")
}

model PlayerInventory {
  id        String      @id @unique @default(uuid())
  addressId String      @map("address_id")
  itemId    String      @map("item_id")
  quantity  Int         @default(1)
  aquiredAt DateTime    @default(now()) @map("aquired_at")
  isListed  Boolean     @default(false) @map("is_listed")
  user      User        @relation(fields: [addressId], references: [addressId])
  item      MarketItems @relation(fields: [itemId], references: [id])

  @@unique([addressId, itemId])
  @@map("Player_Inventory")
}

model PlayerAchievements {
  id            String       @id @unique @default(uuid())
  addressId     String       @map("address_id")
  achievementId String       @map("achievement_id")
  player        Player       @relation(fields: [addressId], references: [addressId])
  achievement   Achievements @relation(fields: [achievementId], references: [id])

  @@map("User_Achievements")
}

model PlayerTransactions {
  id        String      @id @unique @default(uuid())
  playerId  String      @map("address_id")
  itemId    String      @map("item_id")
  quantity  Int
  value     Int
  timestamp DateTime    @default(now())
  player    Player      @relation(fields: [playerId], references: [id])
  item      MarketItems @relation(fields: [itemId], references: [id])

  @@map("Player_Item_Transactions")
}

model Achievements {
  id          String   @id @unique @default(uuid())
  name        String
  description String
  xpReward    Int      @map("xp_reward")
  levelReward Int      @map("level_reward")
  createdAt   DateTime @default(now()) @map("created_at")

  userAchievements PlayerAchievements[]
}

// =============== ENUMS =============== //

enum PackType {
  common
  rare
  epic
}

enum CheeseLogEvent {
  deposit
  withdraw
  upgrade
  buy
  sell
  gift
  dayli
}

enum CheeseType {
  cheese
  superCheese
}

enum CurrencyType {
  CHEESE
  SUPER_CHEESE
  ETH
}

enum Badge {
  PLAYER
  INFLUENCER
  TOON_FRIEND
}

enum DraftAndPublished {
  DRAFT
  PUBLISHED
}

model TokenTransfers {
  id   String @id @unique @default(uuid())
  data Json   @map("data")

  @@map("Token_Transfers")
}
