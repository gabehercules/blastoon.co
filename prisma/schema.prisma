generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  address          String             @unique
  signature        String?            @unique
  slug             String?            @unique
  username         String?            @unique
  createdAt        DateTime           @default(now()) @map("created_at")
  holdingNFTs      Int                @default(0) @map("holding_NFTs")
  upgradedNFTs     Int                @default(0) @map("upgraded_NFTs")
  firstVerified    Boolean            @default(false) @map("first_verified")
  verifiedUpgrade  Boolean            @default(false) @map("verified_upgrade")
  addressId        String             @id @unique @default(uuid()) @map("address_id")
  id               String?            @unique
  nfts             BlastToonNfts[]
  cheeseCoin       Cheese?
  userCheeseLogs   CheeseLogs[]
  Player           Player?
  Player_Inventory Player_Inventory[]
  superCheese      SuperCheese?
  cardPacks        UserCardPacks[]
}

model Cheese {
  id        String @id @unique @default(uuid())
  addressId String @unique @map("address_id")
  amount    Int    @default(0)
  user      User   @relation(fields: [addressId], references: [addressId], onDelete: Cascade)

  @@map("Cheese")
}

model SuperCheese {
  id        String @id @unique @default(uuid())
  addressId String @unique @map("address_id")
  amount    Int    @default(0)
  user      User   @relation(fields: [addressId], references: [addressId], onDelete: Cascade)

  @@map("Super_Cheese")
}

model CardPacks {
  packId           String          @id @default(uuid()) @map("pack_id")
  cheesePrice      Int             @default(0) @map("cheese_price")
  ethPrice         Float           @default(0) @map("eth_price")
  superCheesePrice Int             @default(0) @map("super_cheese_price")
  packType         PackType        @map("pack_type")
  description      String          @default("")
  slug             String          @default("")
  UserCardPacks    UserCardPacks[]

  @@map("Card_Packs")
}

model UserCardPacks {
  id        String    @id @unique @default(uuid())
  addressId String    @map("address_id")
  packId    String    @map("pack_id")
  user      User      @relation(fields: [addressId], references: [addressId])
  pack      CardPacks @relation(fields: [packId], references: [packId])

  @@map("User_Card_Packs")
}

model CheeseLogs {
  id           String         @id @unique @default(uuid())
  addressId    String         @map("address_id")
  cheeseAmount Int            @map("cheese_amount")
  timestamp    DateTime       @default(now())
  event        CheeseLogEvent
  cheeseType   CheeseType     @map("cheese_type")
  user         User           @relation(fields: [addressId], references: [addressId])

  @@map("Cheese_Logs")
}

model BlastToonNfts {
  tokenId        Int     @id @map("token_id")
  imageUri       String? @map("image_uri")
  ownerSince     BigInt? @map("owner_since")
  upgraded       Boolean @default(false)
  lastUpgradedBy String? @map("last_upgraded_by")
  addressId      String? @map("address_id")
  owner          User?   @relation(fields: [addressId], references: [addressId])

  @@map("Blast_Toon_NFTs")
}

model TokenTransfers {
  id   String @id @unique @default(uuid())
  data Json   @map("data")

  @@map("Token_Transfers")
}

model Achievements {
  id                String              @id @unique
  name              String
  description       String
  xp_reward         Int
  level_reward      Int
  created_at        DateTime            @default(now())
  User_Achievements User_Achievements[]
}

model Categories {
  id           String         @id @unique
  name         String
  slug         String         @unique
  description  String
  created_at   DateTime       @default(now())
  Market_Items Market_Items[]
}

model Item_Price {
  id           String       @id @unique
  item_id      String
  currencyType CurrencyType
  price        Float
  Market_Items Market_Items @relation(fields: [item_id], references: [id])
}

model Market_Items {
  id                String             @id @unique
  name              String
  slug              String             @unique
  description       String
  image             String
  is_asset          Boolean            @default(true)
  category_id       String
  created_at        DateTime           @default(now())
  published_at      DateTime?
  cheese_price      Int?
  eth_price         Float?
  status            DraftAndPublished  @default(DRAFT)
  supercheese_price Int?
  Item_Price        Item_Price[]
  Categories        Categories         @relation(fields: [category_id], references: [id])
  Player_Inventory  Player_Inventory[]
}

model Player {
  id                String              @id @unique
  address_id        String              @unique
  username          String              @unique
  level             Int                 @default(1)
  xp                Int                 @default(0)
  cheese            Int                 @default(0)
  super_cheese      Int                 @default(0)
  badge             Badge?
  User              User                @relation(fields: [address_id], references: [addressId])
  User_Achievements User_Achievements[]
}

model Player_Inventory {
  id           String       @id @unique
  address_id   String
  item_id      String
  quantity     Int          @default(1)
  aquired_at   DateTime     @default(now())
  is_listed    Boolean      @default(false)
  User         User         @relation(fields: [address_id], references: [addressId])
  Market_Items Market_Items @relation(fields: [item_id], references: [id])
}

model User_Achievements {
  id             String       @id @unique
  address_id     String
  achievement_id String
  Achievements   Achievements @relation(fields: [achievement_id], references: [id])
  Player         Player       @relation(fields: [address_id], references: [address_id])
}

enum PackType {
  common
  rare
  epic
}

enum CheeseLogEvent {
  deposit
  withdraw
  upgrade
  buy
  sell
  gift
  dayli
}

enum CheeseType {
  cheese
  superCheese
}

enum Badge {
  PLAYER
  INFLUENCER
  TOON_FRIEND
}

enum CurrencyType {
  CHEESE
  SUPER_CHEESE
  ETH
}

enum DraftAndPublished {
  DRAFT
  PUBLISHED
}
