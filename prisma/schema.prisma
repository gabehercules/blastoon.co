// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  createdAt     DateTime         @default(now()) @map("created_at")
  address       String           @unique
  ensDomain     String?          @unique @map("ens_domain")
  signature     String?          @unique
  slug          String?          @unique
  username      String?          @unique
  holdingNFTs   Int              @default(0) @map("holding_NFTs")
  upgradedNFTs  Int              @default(0) @map("upgraded_NFTs")
  firstVerified Boolean          @default(false) @map("first_verified")
  cheeseCoin    userCheese?
  superCheese   userSuperCheese?

  nfts         blastToonNfts[]
  cardPacks    userCardPacks[]
  userCheeseTx userCheeseTx[]
}

model userCheese {
  id        Int    @id @default(autoincrement())
  typeName  String @default("$CHEESE Points") @map("type_name")
  addressId Int    @unique @map("address_id")
  amount    Int    @default(0)
  user      User   @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("User_Cheese")
}

model userSuperCheese {
  id        Int    @id @default(autoincrement())
  typeName  String @default("Super $CHEESE") @map("type_name")
  addressId Int    @unique @map("address_id")
  amount    Int    @default(0)
  user      User   @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("User_Super_Cheese")
}

enum PackType {
  commom
  rare
  epic
}

model userCardPacks {
  id        Int      @id @default(autoincrement())
  addressId Int      @map("address_id")
  packId    Int      @map("pack_id")
  packType  PackType
  user      User     @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("User_Card_Packs")
}

model userCheeseTx {
  id           Int      @id @default(autoincrement())
  addressId    Int      @map("address_id")
  operation    Int // 0: recieved, 1: spent
  cheeseAmount Int      @map("cheese_amount")
  cheeseType   String   @map("cheese_type")
  timestamp    DateTime @default(now())

  user User @relation(fields: [addressId], references: [id])

  @@map("User_Cheese_Tx")
}

model blastToonNfts {
  tokenId        Int     @id @map("token_id")
  imageUri       String? @map("image_uri")
  userId         Int?    @map("user_id")
  ownerSince     BigInt? @map("owner_since")
  upgraded       Boolean @default(false)
  lastUpgradedBy String? @map("last_upgraded_by")
  owner          User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("Blast_Toon_NFTs")
}
