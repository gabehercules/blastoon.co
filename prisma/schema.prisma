generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  addressId       String          @id @unique @default(uuid()) @map("address_id")
  address         String          @unique
  ensDomain       String?         @unique @map("ens_domain")
  signature       String?         @unique
  slug            String?         @unique
  username        String?         @unique
  createdAt       DateTime        @default(now()) @map("created_at")
  holdingNFTs     Int             @default(0) @map("holding_NFTs")
  upgradedNFTs    Int             @default(0) @map("upgraded_NFTs")
  firstVerified   Boolean         @default(false) @map("first_verified")
  verifiedUpgrade Boolean         @default(false) @map("verified_upgrade")
  nfts            BlastToonNfts[]
  cardPacks       CardPacks[]
  cheeseCoin      Cheese?
  userCheeseLogs  CheeseLogs[]
  superCheese     SuperCheese?
}

model Cheese {
  id        String @id @unique @default(uuid())
  addressId String @unique @map("address_id")
  amount    Int    @default(0)
  user      User   @relation(fields: [addressId], references: [addressId], onDelete: Cascade)

  @@map("Cheese")
}

model SuperCheese {
  id        String @id @unique @default(uuid())
  addressId String @unique @map("address_id")
  amount    Int    @default(0)
  user      User   @relation(fields: [addressId], references: [addressId], onDelete: Cascade)

  @@map("Super_Cheese")
}

model CardPacks {
  id        String   @id @unique @default(uuid())
  addressId String   @map("address_id")
  packId    Int      @map("pack_id")
  packType  PackType
  user      User     @relation(fields: [addressId], references: [addressId], onDelete: Cascade)

  @@map("Card_Packs")
}

model CheeseLogs {
  id           String         @id @unique @default(uuid())
  addressId    String         @map("address_id")
  cheeseAmount Int            @map("cheese_amount")
  cheeseType   CheeseType     @map("cheese_type")
  timestamp    DateTime       @default(now())
  user         User           @relation(fields: [addressId], references: [addressId])
  event        CheeseLogEvent

  @@map("Cheese_Logs")
}

model BlastToonNfts {
  tokenId        Int     @id @map("token_id")
  imageUri       String? @map("image_uri")
  addressId      String? @map("address_id")
  ownerSince     BigInt? @map("owner_since")
  upgraded       Boolean @default(false)
  lastUpgradedBy String? @map("last_upgraded_by")
  owner          User?   @relation(fields: [addressId], references: [addressId])

  @@map("Blast_Toon_NFTs")
}

enum PackType {
  commom
  rare
  epic
}

enum CheeseLogEvent {
  deposit
  withdraw
  upgrade
  buy
  sell
  gift
  dayli
}

enum CheeseType {
  cheese
  superCheese
}
