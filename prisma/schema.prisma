// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now()) @map("created_at")
  address       String       @unique
  ensDomain     String?      @unique @map("ens_domain")
  signature     String?      @unique
  slug          String?      @unique
  username      String?      @unique
  holdingNFTs   Int          @default(0) @map("holding_NFTs")
  upgradedNFTs  Int          @default(0) @map("upgraded_NFTs")
  firstVerified Boolean      @default(false) @map("first_verified")
  user_cheese   User_Cheese?

  nfts Nfts[]
}

model User_Cheese {
  id           Int  @id @default(autoincrement())
  addressId    Int  @unique @map("address_id")
  cheeseAmount Int  @map("cheese_amount")
  user         User @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model User_Cheese_Transaction {
  id           Int      @id @default(autoincrement())
  addressId    Int      @map("address_id")
  operation    Int
  cheeseAmount Int      @map("cheese_amount")
  timestamp    DateTime
}

model Nfts {
  tokenId        Int     @id @map("token_id")
  imageUri       String? @map("image_uri")
  userId         Int?    @map("user_id")
  ownerSince     BigInt? @map("owner_since")
  upgraded       Boolean @default(false)
  lastUpgradedBy String? @map("last_upgraded_by")
  owner          User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// model User_NFTs {
//   id        Int   @id @default(autoincrement())
//   addressId Int   @map("address_id")
//   tokenId   Int   @map("token_id")
//   user      User @relation(fields: [addressId], references: [id])
//   nft       NFTs @relation(fields: [tokenId], references: [tokenId])
// }
